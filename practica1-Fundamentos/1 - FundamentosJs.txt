EJECUCIÓN DE SCRIPTS
Hay 2 formas fundamentales de ejecutar JS en un documento html.
a)Directa o secuencial => [ejercicio1.html]

b)Indirecta o como respuesta a un evento => [ejercicio2.html]

Para dinamizar este tipo de situaciones, cuando la aplicación crece y necesitamos que sea escalable, empezamos a 
modularizar el código en distintos ficheros (scripts). Para incorporarlos, lo hacemos de la siguiente forma => [ejercicio3.html]
<script src="archivo_externo.js"></script>

Este archivo externo debe contener tan solo sentencias Javascript. No debemos incluir código HTML de ningún tipo, ni tan siquiera las etiquetas SCRIPT.
A nivel didáctico en esta formación usaremos mucho la práctica de incluir el código Javascript dentro del propio documento HTML. Es algo muy cómodo para expresar 
pequeños ejemplos Javascript. Sin embargo, a nivel profesional no es una práctica aconsejable, sino que la recomendación es colocar todo, o la mayoría de tu código Javascript en 
archivos ".js" que se incluyan de manera externa. 
Existen varios motivos para recomendar esta práctica, entre los cuales podemos destacar:
1)Desde el punto de vista de la separación del código, cada archivo debería tener solo un lenguaje. Los documentos HTML se colocan en archivos ".html", los documentos CSS en 
archivos ".css" y el Javascript también separado en sus archivos ".js".
2)El archivo externo permite que el navegador lo cachee, de modo que cuando la página se vuelve a visitar, el código ya se encuentra en el navegador y no lo tiene que volver a 
descargar. Este punto es especialmente importante cuando tenemos muchas páginas que cargan el mismo código Javascript, ya que el navegador realemnte descargará una vez el 
archivo ".js" y las demás veces lo consumirá desde la caché, ahorrando transferencia y aumentando la velocidad de carga.
3)Cuando tengas más nociones avanzadas sobre Javascript verás que en la etiqueta script puedes usar atributos como "defer" o "async". Ambos atributos provocan que 
el navegador no se detenga a ejecutar un script externo que se encuentre en medio del contenido HTML, sino que siga analizando la página y renderizando su contenido mientras 
que el archivo se descarga. Por tanto, ambos atributos optimizan la carga de la página y mejoran la velocidad con la que el navegador presenta el 
contenido al usuario 
El atributo DEFER indica al navegador que no espere por el script. En lugar de ello, debe seguir procesando el HTML, construir el DOM. El script carga “en segundo plano” y 
se ejecuta cuando el DOM esta completo => [ejercicio4.html, ejercicio7.html, ejercicio8.html]
Los scripts ASYNC cargan en segundo plano y se ejecutan cuando están listos. El DOM y otros scripts no esperan por ellos, y ellos no esperan por nada. Un script totalmente 
independiente que se ejecuta en cuanto se ha cargado.

VARIABLES
Una variable es un espacio en memoria donde se almacena un dato. Los nombres de las variables han de construirse con caracteres alfanuméricos (números y letras), el carácter subrayado 
o guión bajo (_) y el carácter dólar $. Hay que evitar utilizar nombres reservados como variables que son utilizadas para estructuras del propio lenguaje (como "for" o "return").
Hay 3 formas de declarar variables en JS:
var => pueden ser inicializadas, re-declaradas y modificadas a lo largo de la ejecución.
let => pueden ser inicializadas y modificadas a lo largo de la ejecución. No pueden ser re-declaradas.
const => DEBEN ser inicializadas. No pueden re-declaradas ni modificadas a lo largo de la ejecución.
Sin palabra reservada: IMPORTANTE  => Si declaramos una variable de esta forma, JavaScript la tomará siempre como variable global.
(let y const existen desde el ES6(ECMAScript6).)

Ámbito de una variable => [ejercicio5.html]
Se le llama ámbito de las variables al lugar donde estas están disponibles. En Javascript no podremos acceder a variables que hayan sido definidas en otra página web. 
Por tanto, la propia página donde se define es el ámbito más habitual de una variable y le llamaremos a este tipo de variables globales a la página. 
Las variables globales son accesibles desde cualquier lugar de la página, es decir, desde el script donde se han declarado y todos los demás scripts de la página.

También podremos declarar variables en lugares más acotados, como por ejemplo una función. A estas variables les llamaremos locales. Cuando se declaren variables locales sólo podremos 
acceder a ellas dentro del lugar donde se ha declarado, es decir, si la habíamos declarado en una función solo podremos acceder a ella cuando estemos en esa función.

Relaciona con el lugar de la declaración de una variable, debemos conocer uno de los conceptos más importantes, peligroso y a la vez potente que tiene JS: LAS CLOSURES
Tienes una closure cuando una función cualquiera accede a una variable fuera de su contexto.

TIPOS DE DATOS EN JAVASCRIPT => [ejercicio6.html, ejercicio7.html]
JavaScript es capaz de almacenar 6 tipos de datos: 
 - boolean, para los datos boleanos. (True o false)
 - number, para los numéricos.
 - string, para las cadenas de caracteres.
 - object, para los objetos.
 - function, para las funciones.
 - undefined, para variables declaradas a las que no se les ha asignado valores.
 Importante -> Buscar documentación sobre null en js.
Las variable, como indicamos antes, no están tipadas, y pueden almacenar distintos tipos de datos a lo largo de la ejecución. Es responsabilidad del desarrollador
la correcta gestión de lo que se almacena en cada momento en una variable. => [ejercicio6.html]

INTERESANTE
https://www.freecodecamp.org/espanol/news/que-es-un-closure-en-javascript/