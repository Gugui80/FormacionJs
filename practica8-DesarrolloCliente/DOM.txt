DESARROLLO DEL LADO DEL CLIENTE
En esta parte vamos a tratar de explicar todos los recursos con los que cuenta un programador de Javascript y con los que puede crear todo tipo de efectos y aplicaciones. 
Los objetivos cubrirán aspectos diversos de Javascript dentro del navegador, lo que hoy conocemos como desarrollo frontend, en asuntos como:
1)Jerarquía de objetos del navegador (DOM)
2)Trabajo con formularios
3)Eventos

DOM (Document Object Model o modelo de objetos del navegador)
Por medio del DOM podremos controlar al navegador en general y a los distintos elementos que se encuentran en la página. Cualquier elemento de la página se puede controlar 
de una manera u otra accediendo a esa jerarquía.

OBJETO WINDOW => [ejercicio2.html]
Es el objeto principal en la jerarquía y contiene las propiedades y métodos para controlar la ventana del navegador. De él dependen todos los demás objetos de la jerarquía. 
Vamos a ver la lista de sus propiedades y métodos más utilizados (Para no hacer este documento inñutilmente largo, y dado que el objeto window tiene multitud de atributos y
métodos, muchos de ellos con una tasa muy baja de utilización en proyectos reales, dejaremos 2 links con las referencias a los listados de los mismos):
1)Atributos: https://desarrolloweb.com/articulos/826.php
2)Métodos: https://desarrolloweb.com/articulos/827.php

OBJETO DOCUMENT => [ejercicio3.html]
Con el objeto document se controla la página web y todos los elementos que contiene. El objeto document es la página actual que se está visualizando en ese momento. 
Depende del objeto window, pero también puede depender del objeto frame en caso de que la página se está mostrando en un frame. 
Métodos más utilizados del objeto DOCUMENT:
addEventListener(event, callback): Permite añadir un manejador a cualquier evento del navegador que tenga definido la etiqueta html en cuestión.
getElementById(id): Busca el elemento HTML con el id id. Si no lo encuentra devuelve NULL.
getElementsByClassName(class): Busca elementos con la clase class. Si no lo encuentra devuelve [].
getElementsByName(name): Busca elementos con atributo name name. Si no lo encuentra devuelve [].
getElementsByTagName(tag): Busca elementos tag. Si no encuentra devuelve [].
querySelector(sel): Busca el primer elemento que coincide con el selector CSS sel. Si no lo encuentra devuelve null.
querySelectorAll(sel)	Busca todos los elementos que coinciden con el selector CSS sel. Si no lo encuentra [].
createElement(tag, options): Crea y devuelve el elemento HTML definido por el tag.
appendChild(node): Añade como hijo el nodo node. Devuelve el nodo insertado.
textContent: Devuelve el contenido de texto del elemento. Se puede asignar para modificar.
innerHTML: Devuelve el contenido HTML del elemento. Se puede asignar para modificar.

ATRIBUTOS HTML DE UN ELEMENTO => [ejercicio4.html]
hasAttributes(): Indica si el elemento tiene atributos HTML.
hasAttribute(attr): Indica si el elemento tiene el atributo HTML attr.
getAttributeNames(): Devuelve un array con los atributos del elemento.
getAttribute(attr): Devuelve el valor del atributo attr del elemento o null si no existe.
removeAttribute(attr): Elimina el atributo attr del elemento.
setAttribute(attr, value): Añade o cambia el atributo attr al valor value.
getAttributeNode(attr): Idem a getAttribute() pero devuelve el atributo como nodo.
removeAttributeNode(attr): Idem a removeAttribute() pero devuelve el atributo como nodo.
setAttributeNode(attr, value): Idem a setAttribute() pero devuelve el atributo como nodo.

EVENTOS
A las acciones que puede llevar a cabo un usuario al interactuar con una aplicación web se las denomina eventos. JavaScript es capaz de detectar estos eventos
y, a la vez, asociarles un instrucciones que se ejecutarán cuando estos eventos se disparan. A estas funciones se las denomina manejadoras de eventos, y se diferencias de
otras funciones por ir precedidas de la palabra "on".

Listado de eventos disponibles en javascript: https://desarrolloweb.com/articulos/1236.php

Para asociar manejadores de eventos disponemos de formas de implementarlo:
-Como un atributo HTML del elemento.
-A través de una propiedad JavaScript del objeto que representa el elemento.

Objeto Event: Cuando se produce un evento se crea automáticamente un objeto event con información sobre el mismo. Este objeto es accesible únicamente
desde kas funciones asignadas en los manejadores y aparece automáticamente en los parámetros.

fucntion manejadorEvento(event) {
    //Sentencias que utilizan el objeto event
}

El flujo de eventos establece el orden en que se ejecutan. 2 tipos principales:
Event bubbling: En este modelo de flujo de eventos se produce primero el evento en el elemento más interno de la estructura de árbol y va subiendo jerárquicamente hasta llegar al nodo raíz.

Event capturing:En este modelo de flujo de eventos se produce primero el evento del elemento más externo de la estructura de árbol y va bajando jerárquicamente hasta llegar al elemento más interno.
El flujo de eventos del DOM: El flujo de eventos definido en el estandar del DOM soporta los dos modelos anteriores, pero el event capturing se ejecuta en primer lugar, seguido del event bubbling.

OBJETO HISTORY
https://developer.mozilla.org/es/docs/Web/API/History_API

OBJETO LOCATION
https://developer.mozilla.org/es/docs/Web/API/Location

FRAGMENTOS - LA ANTESALA DE LOS WEB COMPONENTS (Se ha decidido explicar esta parte con la documentación de la web lenguajejs.com)
https://lenguajejs.com/javascript/dom/crear-elementos-dom/


