PROGRAMACIÓN ASÍNCRONA
Significa que, a diferencia de la programación secuencial o síncrona, no se tiene por qué respetar el orden de las sentencias durante su ejecución en el tiempo. Es decir, 
pueden aparecer en el código fuente en un orden y sin embargo se pueden llegar a ejecutar en otro orden distinto.
En Javascript tenemos únicamente un único hilo de ejecución de los programas. Gracias a su característica no bloqueante, Javascript puede atender a muchas cosas a la vez, 
aunque solo tenga un hilo de ejecución. En Javascript hay que gestionar la asincronía, para realizar tareas tan comunes como el acceso a las bases de datos, o el acceso al 
sistema de archivos en el lenguaje NodeJS o para realizar consultas a servicios web o APIs desde el navegador con Ajax, por poner algunos ejemplos.

SETTIMEOUT => [ejercicio2.html]
Una función con código a ejecutar(Estas funciones que se pasan como parámetro a otras funciones, se denominan callbacks, y es uno de los mecanismos que tenemos para manejar la
asincronía).
Los milisegundos que deben de pasar hasta que se ejecute la función del primer parámetro.

setTimeout( function() {
  //Código a ejecutar
}, numMiliSegundos);

PROMESAS => [ejercicio3.html]
Las promesas son herramientas un poco más avanzadas para organizar el código de las funciones asíncronas. Permiten de manera centralizada especificar qué queremos hacer 
cuando un proceso asíncrono se ha ejecutado correctamente y lo que se debería hacer cuando el proceso asíncrono ha resultado en una situación de error.
Las promesas se pueden ver como objetos que te devuelven los procesos asíncronos. Cuando un proceso asíncrono funciona devolviendo promesas, en lugar de alimentarlo con una 
función callback usaremos la promesa de retorno para definir qué queremos hacer en cada caso.
El objetivo de las promesas es: hacer algo que dura un tiempo y luego tener la capacidad de informar sobre posibles casos de éxito y de fracaso. Esto lo haremos mediante la creación
de un nuevo tipo de objeto llamado: "Promise". Este objeto tiene 3 estados disponibles: Pendiente (Pending), Cumplida(Fullfilled) y Rechazada(Rejected).

const myPromise = new Promise((resolve, reject) => {
  resolve({//Objeto de respuesta cuando la petición ha tenido éxito})
  reject({//Objeto de respuesta cuando la petición ha fallado})
})

Para consumir la Promesa:
myPromise
  .then(//Código a ejecutar si la petición ha ido correctamente)
  .catch(//Código a ejecutar cuando la petición ha fallado)

NOTA: Para obtener información de todos los métodos que tiene el objeto Promise => https://lenguajejs.com/javascript/asincronia/promise-api/

ASYNC AWAIT => [ejercicio1.html]
Para usar Async Await simplemente debemos marcar una función como asíncrona (con async) y entonces en ella podemos usar la palabra "await" cada vez que necesitemos esperar 
que se resuelva un proceso asíncrono. Es lo que se denomina azúcar sintáctico para gestionar las promesas de una forma más sencilla.

async function myFunction() {
  await //mi código a ejecutar
}